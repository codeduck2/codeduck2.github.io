//康托展开
	#include <stdio.h>
	//康托展开
	//计算[MAX_SIZE]中指定全排列的序号
	#define MAX_SIZE 10
	int main()
	{
	    int fac[MAX_SIZE+2],i,j,pank=0,smaller_n;
	    int list_u[MAX_SIZE]={10,9,8,7,6,5,4,3,2,1};
	    for(i=0 ; i<MAX_SIZE ; i++)                 //fac[MAX_SIZE+2]用于存储阶乘
	    {
		fac[i]=1;
		for(j=1 ; j<=i ; j++)
		    fac[i]*=j;
	    }
	    for(i=0 ; i<MAX_SIZE ; i++)                 //
	    {
		smaller_n=0;                            //
		for(j=i+1 ; j<MAX_SIZE ; j++)           //
		    if(list_u[j]<list_u[i])             //在list_u[i]之后比它小的个数
			smaller_n++;
		pank+=(smaller_n*fac[MAX_SIZE-i-1]);
	    }
	    printf("这是全排序的第%d个\n",pank+1);
	    return 0;
	}
//逆康托展开
	#include <stdio.h>
	#define MAX_SIZE 10
	#define NUM_U 1
	//逆康托展开
	//计算指定全排列的序号对应的数列
	int main()
	{
	    int list[10]={1,2,3,4,5,6,7,8,9,10};        //全排列元素
	    int fac[MAX_SIZE+2],i,j,key;
	    int pank=NUM_U;                                 //需要逆康托展开的pank
	    int list_u[MAX_SIZE];                       //用于存储结果
	    for(i=0 ; i<MAX_SIZE ; i++)                 //fac[MAX_SIZE+2]用于存储阶乘
	    {
		fac[i]=1;
		for(j=1 ; j<=i ; j++)
		    fac[i]*=j;
	    }
	    pank--;
	    for(i=0 ; i<MAX_SIZE ; i++)
	    {
		key=pank/fac[MAX_SIZE-i-1];
		pank-=fac[MAX_SIZE-i-1]*key;
		for(j=0 ; key>=0 ; j++)
		{
		    if(list[j]!=0)
			key--;
		}
		list_u[i]=list[j-1];
		list[j-1]=0;                          //用过的数置为0
	    }
	    for(i=0 ; i<MAX_SIZE ; i++)
		printf("%d ",list_u[i]);
	    return 0;
	}